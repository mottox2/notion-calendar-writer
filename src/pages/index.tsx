import {
  DatePropertyValue,
  Page,
  RichText,
  TitlePropertyValue,
} from "@notionhq/client/build/src/api-types";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import styles from "../styles/Home.module.css";

dayjs.extend(utc);

const useCalendarItems = () => {
  const [items, setItems] = useState<Page[]>([]);
  const [itemByDate, setItemByDate] = useState<Record<string, RichText[]>>({});

  useEffect(() => {
    fetch("/api/get-items").then((res) => {
      res.json().then((value) => {
        setItems(value.items);
      });
    });
  }, []);

  useEffect(() => {
    if (items.length === 0) return;
    let itemByDates: Record<string, RichText[]> = {};
    items.forEach((item) => {
      const { title } = item.properties["Name"] as TitlePropertyValue;
      const { date } = item.properties["Date"] as DatePropertyValue;
      if (!date) return;
      console.log({ title, date });
      itemByDates[date.start] = itemByDates[date.start]
        ? [...itemByDates[date.start], title[0]]
        : [title[0]];
    });
    setItemByDate(itemByDates);
    console.log(itemByDates);
  }, [items]);

  return itemByDate;
};

const Home: NextPage = () => {
  const [range, setRange] = useState({
    start: "",
    end: "",
  });
  const itemByDate = useCalendarItems();

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Calendar
        onChange={(value: Date[]) => {
          const [start, end] = value;
          setRange({
            start: dayjs(start).format("YYYY-MM-DD"),
            end: dayjs(end).format("YYYY-MM-DD"),
          });
        }}
        tileContent={({ date }: { date: string }) => {
          const day = dayjs(dayjs(date).format("YYYY-MM-DD")).format(
            "YYYY-MM-DD"
          );
          const items = itemByDate[day];
          if (!items) return;
          return (
            <div>
              {items.map((title, i) => {
                return (
                  <p
                    className={styles.cell}
                    key={i}
                    onClick={(e) => {
                      e.stopPropagation();
                    }}
                  >
                    {title ? title.plain_text : "untitled"}
                  </p>
                );
              })}
            </div>
          );
        }}
        formatDay={(_l: any, d: Date) => {
          return d.getDate();
        }}
        selectRange={true}
        minDetail="month"
        value={range.start && [new Date(range.start), new Date(range.end)]}
      />
      {JSON.stringify(range, null, 2)}
      {range.start} - {range.end}
    </div>
  );
};

export default Home;
